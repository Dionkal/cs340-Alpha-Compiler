Nonterminals useless in grammar

   expr1
   op


Terminals unused in grammar

   AND
   OR
   GREATEREQUAL
   LESSEQUAL
   EQUAL
   NOTEQUAL
   '*'
   '/'
   '%'
   '+'
   '>'
   '<'


Rules useless in grammar

   79 expr: expr expr1

   80 expr1: op expr1

   81 op: '+'
   82   | '-'
   83   | '*'
   84   | '/'
   85   | '%'
   86   | '>'
   87   | GREATEREQUAL
   88   | '<'
   89   | LESSEQUAL
   90   | EQUAL
   91   | NOTEQUAL
   92   | AND
   93   | OR


Rules useless in parser due to conflicts

   51 objectdef1: %empty

   54 indexed: %empty


State 0 conflicts: 1 reduce/reduce
State 4 conflicts: 1 reduce/reduce
State 18 conflicts: 1 reduce/reduce
State 19 conflicts: 1 reduce/reduce
State 21 conflicts: 1 reduce/reduce
State 23 conflicts: 1 reduce/reduce
State 25 conflicts: 1 reduce/reduce
State 48 conflicts: 1 reduce/reduce
State 49 conflicts: 1 shift/reduce, 1 reduce/reduce
State 58 conflicts: 1 reduce/reduce
State 59 conflicts: 1 reduce/reduce
State 60 conflicts: 1 reduce/reduce
State 65 conflicts: 1 shift/reduce, 1 reduce/reduce
State 67 conflicts: 1 reduce/reduce
State 72 conflicts: 1 reduce/reduce
State 77 conflicts: 1 reduce/reduce
State 78 conflicts: 1 reduce/reduce
State 80 conflicts: 1 reduce/reduce
State 84 conflicts: 1 reduce/reduce
State 102 conflicts: 1 reduce/reduce
State 106 conflicts: 1 shift/reduce
State 108 conflicts: 1 shift/reduce, 1 reduce/reduce
State 117 conflicts: 1 reduce/reduce
State 118 conflicts: 1 reduce/reduce
State 119 conflicts: 1 reduce/reduce
State 120 conflicts: 1 reduce/reduce
State 122 conflicts: 1 reduce/reduce
State 123 conflicts: 1 reduce/reduce
State 132 conflicts: 1 reduce/reduce
State 134 conflicts: 1 shift/reduce
State 140 conflicts: 1 reduce/reduce
State 143 conflicts: 1 reduce/reduce
State 145 conflicts: 1 reduce/reduce
State 148 conflicts: 1 shift/reduce
State 152 conflicts: 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: stmt1
    2        | %empty

    3 stmt1: stmt1 stmt
    4      | stmt

    5 stmt: expr ';'
    6     | ifstmt
    7     | whilestmt
    8     | forstmt
    9     | returnstmt
   10     | BREAK ';'
   11     | CONTINUE ';'
   12     | block
   13     | funcdef
   14     | ';'

   15 expr: assignexpr
   16     | term

   17 term: '(' expr ')'
   18     | '-' expr
   19     | NOT expr
   20     | PLUSPLUS lvalue
   21     | lvalue PLUSPLUS
   22     | MINUSMINUS lvalue
   23     | lvalue MINUSMINUS
   24     | primary

   25 assignexpr: lvalue '=' expr

   26 primary: lvalue
   27        | call
   28        | objectdef
   29        | '(' funcdef ')'
   30        | const

   31 lvalue: ID
   32       | LOCAL ID
   33       | SCOPEOP ID
   34       | member

   35 member: lvalue '.' ID
   36       | lvalue '[' expr ']'
   37       | call '.' ID call '[' expr ']'

   38 call: call '(' elist ')'
   39     | lvalue callsuffix
   40     | '(' funcdef ')' '(' elist ')'

   41 callsuffix: normcall
   42           | methodcall

   43 normcall: '(' elist ')'

   44 methodcall: DOUPLEDOT ID '(' elist ')'

   45 elist: %empty
   46      | expr elist1

   47 elist1: %empty
   48       | ',' expr elist1

   49 objectdef: '['
   50          | objectdef1 ']'

   51 objectdef1: %empty
   52           | elist
   53           | indexed

   54 indexed: %empty
   55        | indexedelem indexed1

   56 indexed1: %empty
   57         | ',' indexedelem indexed1

   58 indexedelem: '{' expr ':' expr '}'

   59 block: '{' stmt1 '}'
   60      | '{' '}'

   61 funcdef: FUNCTION ID '(' idlist ')' block
   62        | FUNCTION '(' idlist ')' block

   63 const: NUMBER
   64      | STRING
   65      | NIL
   66      | TRUE
   67      | FALSE

   68 idlist: %empty
   69       | ID idlist1

   70 idlist1: %empty
   71        | ',' ID idlist1

   72 ifstmt: IF '(' expr ')' stmt ifstmt1

   73 ifstmt1: %empty
   74        | ELSE stmt

   75 whilestmt: WHILE '(' expr ')' stmt

   76 forstmt: FOR '(' elist ';' expr ';' elist ')' stmt

   77 returnstmt: RETURN ';'
   78           | RETURN expr ';'


Terminals, with rules where they appear

$end (0) 0
'%' (37)
'(' (40) 17 29 38 40 43 44 61 62 72 75 76
')' (41) 17 29 38 40 43 44 61 62 72 75 76
'*' (42)
'+' (43)
',' (44) 48 57 71
'-' (45) 18
'.' (46) 35 37
'/' (47)
':' (58) 58
';' (59) 5 10 11 14 76 77 78
'<' (60)
'=' (61) 25
'>' (62)
'[' (91) 36 37 49
']' (93) 36 37 50
'{' (123) 58 59 60
'}' (125) 58 59 60
error (256)
ID (258) 31 32 33 35 37 44 61 69 71
BREAK (259) 10
CONTINUE (260) 11
AND (261)
OR (262)
NOT (263) 19
GREATEREQUAL (264)
LESSEQUAL (265)
EQUAL (266)
NOTEQUAL (267)
PLUSPLUS (268) 20 21
MINUSMINUS (269) 22 23
LOCAL (270) 32
SCOPEOP (271) 33
DOUPLEDOT (272) 44
FUNCTION (273) 61 62
NUMBER (274) 63
STRING (275) 64
NIL (276) 65
TRUE (277) 66
FALSE (278) 67
IF (279) 72
ELSE (280) 74
WHILE (281) 75
FOR (282) 76
RETURN (283) 77 78
UMINUS (284)


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
program (49)
    on left: 1 2, on right: 0
stmt1 (50)
    on left: 3 4, on right: 1 3 59
stmt (51)
    on left: 5 6 7 8 9 10 11 12 13 14, on right: 3 4 72 74 75 76
expr (52)
    on left: 15 16, on right: 5 17 18 19 25 36 37 46 48 58 72 75 76
    78
term (53)
    on left: 17 18 19 20 21 22 23 24, on right: 16
assignexpr (54)
    on left: 25, on right: 15
primary (55)
    on left: 26 27 28 29 30, on right: 24
lvalue (56)
    on left: 31 32 33 34, on right: 20 21 22 23 25 26 35 36 39
member (57)
    on left: 35 36 37, on right: 34
call (58)
    on left: 38 39 40, on right: 27 37 38
callsuffix (59)
    on left: 41 42, on right: 39
normcall (60)
    on left: 43, on right: 41
methodcall (61)
    on left: 44, on right: 42
elist (62)
    on left: 45 46, on right: 38 40 43 44 52 76
elist1 (63)
    on left: 47 48, on right: 46 48
objectdef (64)
    on left: 49 50, on right: 28
objectdef1 (65)
    on left: 51 52 53, on right: 50
indexed (66)
    on left: 54 55, on right: 53
indexed1 (67)
    on left: 56 57, on right: 55 57
indexedelem (68)
    on left: 58, on right: 55 57
block (69)
    on left: 59 60, on right: 12 61 62
funcdef (70)
    on left: 61 62, on right: 13 29 40
const (71)
    on left: 63 64 65 66 67, on right: 30
idlist (72)
    on left: 68 69, on right: 61 62
idlist1 (73)
    on left: 70 71, on right: 69 71
ifstmt (74)
    on left: 72, on right: 6
ifstmt1 (75)
    on left: 73 74, on right: 72
whilestmt (76)
    on left: 75, on right: 7
forstmt (77)
    on left: 76, on right: 8
returnstmt (78)
    on left: 77 78, on right: 9


State 0

    0 $accept: . program $end

    ID          shift, and go to state 1
    BREAK       shift, and go to state 2
    CONTINUE    shift, and go to state 3
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    FUNCTION    shift, and go to state 9
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    IF          shift, and go to state 15
    WHILE       shift, and go to state 16
    FOR         shift, and go to state 17
    RETURN      shift, and go to state 18
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    ';'         shift, and go to state 22
    '{'         shift, and go to state 23

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 2 (program)

    program      go to state 24
    stmt1        go to state 25
    stmt         go to state 26
    expr         go to state 27
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    block        go to state 39
    funcdef      go to state 40
    const        go to state 41
    ifstmt       go to state 42
    whilestmt    go to state 43
    forstmt      go to state 44
    returnstmt   go to state 45


State 1

   31 lvalue: ID .

    $default  reduce using rule 31 (lvalue)


State 2

   10 stmt: BREAK . ';'

    ';'  shift, and go to state 46


State 3

   11 stmt: CONTINUE . ';'

    ';'  shift, and go to state 47


State 4

   19 term: NOT . expr

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    expr         go to state 49
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 5

   20 term: PLUSPLUS . lvalue

    ID       shift, and go to state 1
    LOCAL    shift, and go to state 7
    SCOPEOP  shift, and go to state 8
    '('      shift, and go to state 50

    lvalue  go to state 51
    member  go to state 32
    call    go to state 52


State 6

   22 term: MINUSMINUS . lvalue

    ID       shift, and go to state 1
    LOCAL    shift, and go to state 7
    SCOPEOP  shift, and go to state 8
    '('      shift, and go to state 50

    lvalue  go to state 53
    member  go to state 32
    call    go to state 52


State 7

   32 lvalue: LOCAL . ID

    ID  shift, and go to state 54


State 8

   33 lvalue: SCOPEOP . ID

    ID  shift, and go to state 55


State 9

   61 funcdef: FUNCTION . ID '(' idlist ')' block
   62        | FUNCTION . '(' idlist ')' block

    ID   shift, and go to state 56
    '('  shift, and go to state 57


State 10

   63 const: NUMBER .

    $default  reduce using rule 63 (const)


State 11

   64 const: STRING .

    $default  reduce using rule 64 (const)


State 12

   65 const: NIL .

    $default  reduce using rule 65 (const)


State 13

   66 const: TRUE .

    $default  reduce using rule 66 (const)


State 14

   67 const: FALSE .

    $default  reduce using rule 67 (const)


State 15

   72 ifstmt: IF . '(' expr ')' stmt ifstmt1

    '('  shift, and go to state 58


State 16

   75 whilestmt: WHILE . '(' expr ')' stmt

    '('  shift, and go to state 59


State 17

   76 forstmt: FOR . '(' elist ';' expr ';' elist ')' stmt

    '('  shift, and go to state 60


State 18

   77 returnstmt: RETURN . ';'
   78           | RETURN . expr ';'

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    ';'         shift, and go to state 61
    '{'         shift, and go to state 48

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    expr         go to state 62
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 19

   17 term: '(' . expr ')'
   29 primary: '(' . funcdef ')'
   40 call: '(' . funcdef ')' '(' elist ')'

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    FUNCTION    shift, and go to state 9
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    expr         go to state 63
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    funcdef      go to state 64
    const        go to state 41


State 20

   49 objectdef: '[' .

    $default  reduce using rule 49 (objectdef)


State 21

   18 term: '-' . expr

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    expr         go to state 65
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 22

   14 stmt: ';' .

    $default  reduce using rule 14 (stmt)


State 23

   58 indexedelem: '{' . expr ':' expr '}'
   59 block: '{' . stmt1 '}'
   60      | '{' . '}'

    ID          shift, and go to state 1
    BREAK       shift, and go to state 2
    CONTINUE    shift, and go to state 3
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    FUNCTION    shift, and go to state 9
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    IF          shift, and go to state 15
    WHILE       shift, and go to state 16
    FOR         shift, and go to state 17
    RETURN      shift, and go to state 18
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    ';'         shift, and go to state 22
    '{'         shift, and go to state 23
    '}'         shift, and go to state 66

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    stmt1        go to state 67
    stmt         go to state 26
    expr         go to state 68
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    block        go to state 39
    funcdef      go to state 40
    const        go to state 41
    ifstmt       go to state 42
    whilestmt    go to state 43
    forstmt      go to state 44
    returnstmt   go to state 45


State 24

    0 $accept: program . $end

    $end  shift, and go to state 69


State 25

    1 program: stmt1 .
    3 stmt1: stmt1 . stmt

    ID          shift, and go to state 1
    BREAK       shift, and go to state 2
    CONTINUE    shift, and go to state 3
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    FUNCTION    shift, and go to state 9
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    IF          shift, and go to state 15
    WHILE       shift, and go to state 16
    FOR         shift, and go to state 17
    RETURN      shift, and go to state 18
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    ';'         shift, and go to state 22
    '{'         shift, and go to state 23

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 1 (program)

    stmt         go to state 70
    expr         go to state 27
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    block        go to state 39
    funcdef      go to state 40
    const        go to state 41
    ifstmt       go to state 42
    whilestmt    go to state 43
    forstmt      go to state 44
    returnstmt   go to state 45


State 26

    4 stmt1: stmt .

    $default  reduce using rule 4 (stmt1)


State 27

    5 stmt: expr . ';'
   46 elist: expr . elist1

    ';'  shift, and go to state 71
    ','  shift, and go to state 72

    $default  reduce using rule 47 (elist1)

    elist1  go to state 73


State 28

   16 expr: term .

    $default  reduce using rule 16 (expr)


State 29

   15 expr: assignexpr .

    $default  reduce using rule 15 (expr)


State 30

   24 term: primary .

    $default  reduce using rule 24 (term)


State 31

   21 term: lvalue . PLUSPLUS
   23     | lvalue . MINUSMINUS
   25 assignexpr: lvalue . '=' expr
   26 primary: lvalue .
   35 member: lvalue . '.' ID
   36       | lvalue . '[' expr ']'
   39 call: lvalue . callsuffix

    PLUSPLUS    shift, and go to state 74
    MINUSMINUS  shift, and go to state 75
    DOUPLEDOT   shift, and go to state 76
    '('         shift, and go to state 77
    '['         shift, and go to state 78
    '.'         shift, and go to state 79
    '='         shift, and go to state 80

    $default  reduce using rule 26 (primary)

    callsuffix  go to state 81
    normcall    go to state 82
    methodcall  go to state 83


State 32

   34 lvalue: member .

    $default  reduce using rule 34 (lvalue)


State 33

   27 primary: call .
   37 member: call . '.' ID call '[' expr ']'
   38 call: call . '(' elist ')'

    '('  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 27 (primary)


State 34

   52 objectdef1: elist .

    $default  reduce using rule 52 (objectdef1)


State 35

   28 primary: objectdef .

    $default  reduce using rule 28 (primary)


State 36

   50 objectdef: objectdef1 . ']'

    ']'  shift, and go to state 86


State 37

   53 objectdef1: indexed .

    $default  reduce using rule 53 (objectdef1)


State 38

   55 indexed: indexedelem . indexed1

    ','  shift, and go to state 87

    $default  reduce using rule 56 (indexed1)

    indexed1  go to state 88


State 39

   12 stmt: block .

    $default  reduce using rule 12 (stmt)


State 40

   13 stmt: funcdef .

    $default  reduce using rule 13 (stmt)


State 41

   30 primary: const .

    $default  reduce using rule 30 (primary)


State 42

    6 stmt: ifstmt .

    $default  reduce using rule 6 (stmt)


State 43

    7 stmt: whilestmt .

    $default  reduce using rule 7 (stmt)


State 44

    8 stmt: forstmt .

    $default  reduce using rule 8 (stmt)


State 45

    9 stmt: returnstmt .

    $default  reduce using rule 9 (stmt)


State 46

   10 stmt: BREAK ';' .

    $default  reduce using rule 10 (stmt)


State 47

   11 stmt: CONTINUE ';' .

    $default  reduce using rule 11 (stmt)


State 48

   58 indexedelem: '{' . expr ':' expr '}'

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    expr         go to state 89
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 49

   19 term: NOT expr .
   46 elist: expr . elist1

    ','  shift, and go to state 72

    ']'       reduce using rule 19 (term)
    ']'       [reduce using rule 47 (elist1)]
    ','       [reduce using rule 19 (term)]
    $default  reduce using rule 19 (term)

    elist1  go to state 73


State 50

   40 call: '(' . funcdef ')' '(' elist ')'

    FUNCTION  shift, and go to state 9

    funcdef  go to state 90


State 51

   20 term: PLUSPLUS lvalue .
   35 member: lvalue . '.' ID
   36       | lvalue . '[' expr ']'
   39 call: lvalue . callsuffix

    DOUPLEDOT  shift, and go to state 76
    '('        shift, and go to state 77
    '['        shift, and go to state 78
    '.'        shift, and go to state 79

    $default  reduce using rule 20 (term)

    callsuffix  go to state 81
    normcall    go to state 82
    methodcall  go to state 83


State 52

   37 member: call . '.' ID call '[' expr ']'
   38 call: call . '(' elist ')'

    '('  shift, and go to state 84
    '.'  shift, and go to state 85


State 53

   22 term: MINUSMINUS lvalue .
   35 member: lvalue . '.' ID
   36       | lvalue . '[' expr ']'
   39 call: lvalue . callsuffix

    DOUPLEDOT  shift, and go to state 76
    '('        shift, and go to state 77
    '['        shift, and go to state 78
    '.'        shift, and go to state 79

    $default  reduce using rule 22 (term)

    callsuffix  go to state 81
    normcall    go to state 82
    methodcall  go to state 83


State 54

   32 lvalue: LOCAL ID .

    $default  reduce using rule 32 (lvalue)


State 55

   33 lvalue: SCOPEOP ID .

    $default  reduce using rule 33 (lvalue)


State 56

   61 funcdef: FUNCTION ID . '(' idlist ')' block

    '('  shift, and go to state 91


State 57

   62 funcdef: FUNCTION '(' . idlist ')' block

    ID  shift, and go to state 92

    $default  reduce using rule 68 (idlist)

    idlist  go to state 93


State 58

   72 ifstmt: IF '(' . expr ')' stmt ifstmt1

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    expr         go to state 94
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 59

   75 whilestmt: WHILE '(' . expr ')' stmt

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    expr         go to state 95
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 60

   76 forstmt: FOR '(' . elist ';' expr ';' elist ')' stmt

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    expr         go to state 96
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 97
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 61

   77 returnstmt: RETURN ';' .

    $default  reduce using rule 77 (returnstmt)


State 62

   46 elist: expr . elist1
   78 returnstmt: RETURN expr . ';'

    ';'  shift, and go to state 98
    ','  shift, and go to state 72

    $default  reduce using rule 47 (elist1)

    elist1  go to state 73


State 63

   17 term: '(' expr . ')'
   46 elist: expr . elist1

    ')'  shift, and go to state 99
    ','  shift, and go to state 72

    $default  reduce using rule 47 (elist1)

    elist1  go to state 73


State 64

   29 primary: '(' funcdef . ')'
   40 call: '(' funcdef . ')' '(' elist ')'

    ')'  shift, and go to state 100


State 65

   18 term: '-' expr .
   46 elist: expr . elist1

    ','  shift, and go to state 72

    ']'       reduce using rule 18 (term)
    ']'       [reduce using rule 47 (elist1)]
    ','       [reduce using rule 18 (term)]
    $default  reduce using rule 18 (term)

    elist1  go to state 73


State 66

   60 block: '{' '}' .

    $default  reduce using rule 60 (block)


State 67

    3 stmt1: stmt1 . stmt
   59 block: '{' stmt1 . '}'

    ID          shift, and go to state 1
    BREAK       shift, and go to state 2
    CONTINUE    shift, and go to state 3
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    FUNCTION    shift, and go to state 9
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    IF          shift, and go to state 15
    WHILE       shift, and go to state 16
    FOR         shift, and go to state 17
    RETURN      shift, and go to state 18
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    ';'         shift, and go to state 22
    '{'         shift, and go to state 23
    '}'         shift, and go to state 101

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    stmt         go to state 70
    expr         go to state 27
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    block        go to state 39
    funcdef      go to state 40
    const        go to state 41
    ifstmt       go to state 42
    whilestmt    go to state 43
    forstmt      go to state 44
    returnstmt   go to state 45


State 68

    5 stmt: expr . ';'
   46 elist: expr . elist1
   58 indexedelem: '{' expr . ':' expr '}'

    ';'  shift, and go to state 71
    ','  shift, and go to state 72
    ':'  shift, and go to state 102

    $default  reduce using rule 47 (elist1)

    elist1  go to state 73


State 69

    0 $accept: program $end .

    $default  accept


State 70

    3 stmt1: stmt1 stmt .

    $default  reduce using rule 3 (stmt1)


State 71

    5 stmt: expr ';' .

    $default  reduce using rule 5 (stmt)


State 72

   48 elist1: ',' . expr elist1

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    expr         go to state 103
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 73

   46 elist: expr elist1 .

    $default  reduce using rule 46 (elist)


State 74

   21 term: lvalue PLUSPLUS .

    $default  reduce using rule 21 (term)


State 75

   23 term: lvalue MINUSMINUS .

    $default  reduce using rule 23 (term)


State 76

   44 methodcall: DOUPLEDOT . ID '(' elist ')'

    ID  shift, and go to state 104


State 77

   43 normcall: '(' . elist ')'

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    expr         go to state 96
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 105
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 78

   36 member: lvalue '[' . expr ']'

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    expr         go to state 106
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 79

   35 member: lvalue '.' . ID

    ID  shift, and go to state 107


State 80

   25 assignexpr: lvalue '=' . expr

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    expr         go to state 108
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 81

   39 call: lvalue callsuffix .

    $default  reduce using rule 39 (call)


State 82

   41 callsuffix: normcall .

    $default  reduce using rule 41 (callsuffix)


State 83

   42 callsuffix: methodcall .

    $default  reduce using rule 42 (callsuffix)


State 84

   38 call: call '(' . elist ')'

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    expr         go to state 96
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 109
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 85

   37 member: call '.' . ID call '[' expr ']'

    ID  shift, and go to state 110


State 86

   50 objectdef: objectdef1 ']' .

    $default  reduce using rule 50 (objectdef)


State 87

   57 indexed1: ',' . indexedelem indexed1

    '{'  shift, and go to state 48

    indexedelem  go to state 111


State 88

   55 indexed: indexedelem indexed1 .

    $default  reduce using rule 55 (indexed)


State 89

   46 elist: expr . elist1
   58 indexedelem: '{' expr . ':' expr '}'

    ','  shift, and go to state 72
    ':'  shift, and go to state 102

    $default  reduce using rule 47 (elist1)

    elist1  go to state 73


State 90

   40 call: '(' funcdef . ')' '(' elist ')'

    ')'  shift, and go to state 112


State 91

   61 funcdef: FUNCTION ID '(' . idlist ')' block

    ID  shift, and go to state 92

    $default  reduce using rule 68 (idlist)

    idlist  go to state 113


State 92

   69 idlist: ID . idlist1

    ','  shift, and go to state 114

    $default  reduce using rule 70 (idlist1)

    idlist1  go to state 115


State 93

   62 funcdef: FUNCTION '(' idlist . ')' block

    ')'  shift, and go to state 116


State 94

   46 elist: expr . elist1
   72 ifstmt: IF '(' expr . ')' stmt ifstmt1

    ')'  shift, and go to state 117
    ','  shift, and go to state 72

    $default  reduce using rule 47 (elist1)

    elist1  go to state 73


State 95

   46 elist: expr . elist1
   75 whilestmt: WHILE '(' expr . ')' stmt

    ')'  shift, and go to state 118
    ','  shift, and go to state 72

    $default  reduce using rule 47 (elist1)

    elist1  go to state 73


State 96

   46 elist: expr . elist1

    ','  shift, and go to state 72

    $default  reduce using rule 47 (elist1)

    elist1  go to state 73


State 97

   52 objectdef1: elist .
   76 forstmt: FOR '(' elist . ';' expr ';' elist ')' stmt

    ';'  shift, and go to state 119

    $default  reduce using rule 52 (objectdef1)


State 98

   78 returnstmt: RETURN expr ';' .

    $default  reduce using rule 78 (returnstmt)


State 99

   17 term: '(' expr ')' .

    $default  reduce using rule 17 (term)


State 100

   29 primary: '(' funcdef ')' .
   40 call: '(' funcdef ')' . '(' elist ')'

    '('  shift, and go to state 120

    $default  reduce using rule 29 (primary)


State 101

   59 block: '{' stmt1 '}' .

    $default  reduce using rule 59 (block)


State 102

   58 indexedelem: '{' expr ':' . expr '}'

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    expr         go to state 121
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 103

   46 elist: expr . elist1
   48 elist1: ',' expr . elist1

    ','  shift, and go to state 72

    $default  reduce using rule 47 (elist1)

    elist1  go to state 122


State 104

   44 methodcall: DOUPLEDOT ID . '(' elist ')'

    '('  shift, and go to state 123


State 105

   43 normcall: '(' elist . ')'
   52 objectdef1: elist .

    ')'  shift, and go to state 124

    $default  reduce using rule 52 (objectdef1)


State 106

   36 member: lvalue '[' expr . ']'
   46 elist: expr . elist1

    ']'  shift, and go to state 125
    ','  shift, and go to state 72

    ']'  [reduce using rule 47 (elist1)]

    elist1  go to state 73


State 107

   35 member: lvalue '.' ID .

    $default  reduce using rule 35 (member)


State 108

   25 assignexpr: lvalue '=' expr .
   46 elist: expr . elist1

    ','  shift, and go to state 72

    ']'       reduce using rule 25 (assignexpr)
    ']'       [reduce using rule 47 (elist1)]
    ','       [reduce using rule 25 (assignexpr)]
    $default  reduce using rule 25 (assignexpr)

    elist1  go to state 73


State 109

   38 call: call '(' elist . ')'
   52 objectdef1: elist .

    ')'  shift, and go to state 126

    $default  reduce using rule 52 (objectdef1)


State 110

   37 member: call '.' ID . call '[' expr ']'

    ID       shift, and go to state 1
    LOCAL    shift, and go to state 7
    SCOPEOP  shift, and go to state 8
    '('      shift, and go to state 50

    lvalue  go to state 127
    member  go to state 32
    call    go to state 128


State 111

   57 indexed1: ',' indexedelem . indexed1

    ','  shift, and go to state 87

    $default  reduce using rule 56 (indexed1)

    indexed1  go to state 129


State 112

   40 call: '(' funcdef ')' . '(' elist ')'

    '('  shift, and go to state 120


State 113

   61 funcdef: FUNCTION ID '(' idlist . ')' block

    ')'  shift, and go to state 130


State 114

   71 idlist1: ',' . ID idlist1

    ID  shift, and go to state 131


State 115

   69 idlist: ID idlist1 .

    $default  reduce using rule 69 (idlist)


State 116

   62 funcdef: FUNCTION '(' idlist ')' . block

    '{'  shift, and go to state 132

    block  go to state 133


State 117

   72 ifstmt: IF '(' expr ')' . stmt ifstmt1

    ID          shift, and go to state 1
    BREAK       shift, and go to state 2
    CONTINUE    shift, and go to state 3
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    FUNCTION    shift, and go to state 9
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    IF          shift, and go to state 15
    WHILE       shift, and go to state 16
    FOR         shift, and go to state 17
    RETURN      shift, and go to state 18
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    ';'         shift, and go to state 22
    '{'         shift, and go to state 23

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    stmt         go to state 134
    expr         go to state 27
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    block        go to state 39
    funcdef      go to state 40
    const        go to state 41
    ifstmt       go to state 42
    whilestmt    go to state 43
    forstmt      go to state 44
    returnstmt   go to state 45


State 118

   75 whilestmt: WHILE '(' expr ')' . stmt

    ID          shift, and go to state 1
    BREAK       shift, and go to state 2
    CONTINUE    shift, and go to state 3
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    FUNCTION    shift, and go to state 9
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    IF          shift, and go to state 15
    WHILE       shift, and go to state 16
    FOR         shift, and go to state 17
    RETURN      shift, and go to state 18
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    ';'         shift, and go to state 22
    '{'         shift, and go to state 23

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    stmt         go to state 135
    expr         go to state 27
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    block        go to state 39
    funcdef      go to state 40
    const        go to state 41
    ifstmt       go to state 42
    whilestmt    go to state 43
    forstmt      go to state 44
    returnstmt   go to state 45


State 119

   76 forstmt: FOR '(' elist ';' . expr ';' elist ')' stmt

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    expr         go to state 136
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 120

   40 call: '(' funcdef ')' '(' . elist ')'

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    expr         go to state 96
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 137
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 121

   46 elist: expr . elist1
   58 indexedelem: '{' expr ':' expr . '}'

    ','  shift, and go to state 72
    '}'  shift, and go to state 138

    $default  reduce using rule 47 (elist1)

    elist1  go to state 73


State 122

   46 elist: expr elist1 .
   48 elist1: ',' expr elist1 .

    ']'       reduce using rule 46 (elist)
    ']'       [reduce using rule 48 (elist1)]
    $default  reduce using rule 48 (elist1)


State 123

   44 methodcall: DOUPLEDOT ID '(' . elist ')'

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    expr         go to state 96
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 139
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 124

   43 normcall: '(' elist ')' .

    $default  reduce using rule 43 (normcall)


State 125

   36 member: lvalue '[' expr ']' .

    $default  reduce using rule 36 (member)


State 126

   38 call: call '(' elist ')' .

    $default  reduce using rule 38 (call)


State 127

   35 member: lvalue . '.' ID
   36       | lvalue . '[' expr ']'
   39 call: lvalue . callsuffix

    DOUPLEDOT  shift, and go to state 76
    '('        shift, and go to state 77
    '['        shift, and go to state 78
    '.'        shift, and go to state 79

    callsuffix  go to state 81
    normcall    go to state 82
    methodcall  go to state 83


State 128

   37 member: call . '.' ID call '[' expr ']'
   37       | call '.' ID call . '[' expr ']'
   38 call: call . '(' elist ')'

    '('  shift, and go to state 84
    '['  shift, and go to state 140
    '.'  shift, and go to state 85


State 129

   57 indexed1: ',' indexedelem indexed1 .

    $default  reduce using rule 57 (indexed1)


State 130

   61 funcdef: FUNCTION ID '(' idlist ')' . block

    '{'  shift, and go to state 132

    block  go to state 141


State 131

   71 idlist1: ',' ID . idlist1

    ','  shift, and go to state 114

    $default  reduce using rule 70 (idlist1)

    idlist1  go to state 142


State 132

   59 block: '{' . stmt1 '}'
   60      | '{' . '}'

    ID          shift, and go to state 1
    BREAK       shift, and go to state 2
    CONTINUE    shift, and go to state 3
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    FUNCTION    shift, and go to state 9
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    IF          shift, and go to state 15
    WHILE       shift, and go to state 16
    FOR         shift, and go to state 17
    RETURN      shift, and go to state 18
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    ';'         shift, and go to state 22
    '{'         shift, and go to state 23
    '}'         shift, and go to state 66

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    stmt1        go to state 67
    stmt         go to state 26
    expr         go to state 27
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    block        go to state 39
    funcdef      go to state 40
    const        go to state 41
    ifstmt       go to state 42
    whilestmt    go to state 43
    forstmt      go to state 44
    returnstmt   go to state 45


State 133

   62 funcdef: FUNCTION '(' idlist ')' block .

    $default  reduce using rule 62 (funcdef)


State 134

   72 ifstmt: IF '(' expr ')' stmt . ifstmt1

    ELSE  shift, and go to state 143

    ELSE      [reduce using rule 73 (ifstmt1)]
    $default  reduce using rule 73 (ifstmt1)

    ifstmt1  go to state 144


State 135

   75 whilestmt: WHILE '(' expr ')' stmt .

    $default  reduce using rule 75 (whilestmt)


State 136

   46 elist: expr . elist1
   76 forstmt: FOR '(' elist ';' expr . ';' elist ')' stmt

    ';'  shift, and go to state 145
    ','  shift, and go to state 72

    $default  reduce using rule 47 (elist1)

    elist1  go to state 73


State 137

   40 call: '(' funcdef ')' '(' elist . ')'
   52 objectdef1: elist .

    ')'  shift, and go to state 146

    $default  reduce using rule 52 (objectdef1)


State 138

   58 indexedelem: '{' expr ':' expr '}' .

    $default  reduce using rule 58 (indexedelem)


State 139

   44 methodcall: DOUPLEDOT ID '(' elist . ')'
   52 objectdef1: elist .

    ')'  shift, and go to state 147

    $default  reduce using rule 52 (objectdef1)


State 140

   37 member: call '.' ID call '[' . expr ']'

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    expr         go to state 148
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 141

   61 funcdef: FUNCTION ID '(' idlist ')' block .

    $default  reduce using rule 61 (funcdef)


State 142

   71 idlist1: ',' ID idlist1 .

    $default  reduce using rule 71 (idlist1)


State 143

   74 ifstmt1: ELSE . stmt

    ID          shift, and go to state 1
    BREAK       shift, and go to state 2
    CONTINUE    shift, and go to state 3
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    FUNCTION    shift, and go to state 9
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    IF          shift, and go to state 15
    WHILE       shift, and go to state 16
    FOR         shift, and go to state 17
    RETURN      shift, and go to state 18
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    ';'         shift, and go to state 22
    '{'         shift, and go to state 23

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    stmt         go to state 149
    expr         go to state 27
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    block        go to state 39
    funcdef      go to state 40
    const        go to state 41
    ifstmt       go to state 42
    whilestmt    go to state 43
    forstmt      go to state 44
    returnstmt   go to state 45


State 144

   72 ifstmt: IF '(' expr ')' stmt ifstmt1 .

    $default  reduce using rule 72 (ifstmt)


State 145

   76 forstmt: FOR '(' elist ';' expr ';' . elist ')' stmt

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    expr         go to state 96
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 150
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 146

   40 call: '(' funcdef ')' '(' elist ')' .

    $default  reduce using rule 40 (call)


State 147

   44 methodcall: DOUPLEDOT ID '(' elist ')' .

    $default  reduce using rule 44 (methodcall)


State 148

   37 member: call '.' ID call '[' expr . ']'
   46 elist: expr . elist1

    ']'  shift, and go to state 151
    ','  shift, and go to state 72

    ']'  [reduce using rule 47 (elist1)]

    elist1  go to state 73


State 149

   74 ifstmt1: ELSE stmt .

    $default  reduce using rule 74 (ifstmt1)


State 150

   52 objectdef1: elist .
   76 forstmt: FOR '(' elist ';' expr ';' elist . ')' stmt

    ')'  shift, and go to state 152

    $default  reduce using rule 52 (objectdef1)


State 151

   37 member: call '.' ID call '[' expr ']' .

    $default  reduce using rule 37 (member)


State 152

   76 forstmt: FOR '(' elist ';' expr ';' elist ')' . stmt

    ID          shift, and go to state 1
    BREAK       shift, and go to state 2
    CONTINUE    shift, and go to state 3
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    FUNCTION    shift, and go to state 9
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    IF          shift, and go to state 15
    WHILE       shift, and go to state 16
    FOR         shift, and go to state 17
    RETURN      shift, and go to state 18
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    ';'         shift, and go to state 22
    '{'         shift, and go to state 23

    ']'       reduce using rule 45 (elist)
    ']'       [reduce using rule 51 (objectdef1)]
    ']'       [reduce using rule 54 (indexed)]
    $default  reduce using rule 45 (elist)

    stmt         go to state 153
    expr         go to state 27
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    block        go to state 39
    funcdef      go to state 40
    const        go to state 41
    ifstmt       go to state 42
    whilestmt    go to state 43
    forstmt      go to state 44
    returnstmt   go to state 45


State 153

   76 forstmt: FOR '(' elist ';' expr ';' elist ')' stmt .

    $default  reduce using rule 76 (forstmt)
