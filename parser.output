Rules useless in parser due to conflicts

   65 objectdef1: %empty

   68 indexed: %empty


State 0 conflicts: 1 reduce/reduce
State 4 conflicts: 1 reduce/reduce
State 18 conflicts: 15 shift/reduce, 1 reduce/reduce
State 19 conflicts: 1 reduce/reduce
State 21 conflicts: 1 reduce/reduce
State 23 conflicts: 1 reduce/reduce
State 25 conflicts: 1 reduce/reduce
State 31 conflicts: 4 shift/reduce
State 33 conflicts: 1 shift/reduce
State 48 conflicts: 1 reduce/reduce
State 49 conflicts: 1 shift/reduce, 1 reduce/reduce
State 58 conflicts: 1 reduce/reduce
State 59 conflicts: 1 reduce/reduce
State 60 conflicts: 1 reduce/reduce
State 61 conflicts: 1 shift/reduce, 1 reduce/reduce
State 65 conflicts: 1 shift/reduce, 1 reduce/reduce
State 67 conflicts: 1 reduce/reduce
State 85 conflicts: 1 reduce/reduce
State 86 conflicts: 1 reduce/reduce
State 91 conflicts: 1 reduce/reduce
State 92 conflicts: 1 reduce/reduce
State 94 conflicts: 1 reduce/reduce
State 98 conflicts: 1 reduce/reduce
State 115 conflicts: 1 reduce/reduce
State 117 conflicts: 14 shift/reduce, 1 reduce/reduce
State 120 conflicts: 1 shift/reduce
State 122 conflicts: 1 shift/reduce, 1 reduce/reduce
State 131 conflicts: 1 reduce/reduce
State 132 conflicts: 1 reduce/reduce
State 133 conflicts: 1 reduce/reduce
State 134 conflicts: 1 reduce/reduce
State 136 conflicts: 1 reduce/reduce
State 137 conflicts: 1 reduce/reduce
State 146 conflicts: 1 reduce/reduce
State 148 conflicts: 1 shift/reduce
State 154 conflicts: 1 reduce/reduce
State 157 conflicts: 1 reduce/reduce
State 159 conflicts: 1 reduce/reduce
State 162 conflicts: 1 shift/reduce
State 166 conflicts: 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: stmt1
    2        | %empty

    3 stmt1: stmt1 stmt
    4      | stmt

    5 stmt: expr ';'
    6     | ifstmt
    7     | whilestmt
    8     | forstmt
    9     | returnstmt
   10     | BREAK ';'
   11     | CONTINUE ';'
   12     | block
   13     | funcdef
   14     | ';'

   15 expr: assignexpr
   16     | expr op expr
   17     | term

   18 op: '+'
   19   | '-'
   20   | '*'
   21   | '/'
   22   | '%'
   23   | '>'
   24   | GREATEREQUAL
   25   | '<'
   26   | LESSEQUAL
   27   | EQUAL
   28   | NOTEQUAL
   29   | AND
   30   | OR

   31 term: '(' expr ')'
   32     | '-' expr
   33     | NOT expr
   34     | PLUSPLUS lvalue
   35     | lvalue PLUSPLUS
   36     | MINUSMINUS lvalue
   37     | lvalue MINUSMINUS
   38     | primary

   39 assignexpr: lvalue '=' expr

   40 primary: lvalue
   41        | call
   42        | objectdef
   43        | '(' funcdef ')'
   44        | const

   45 lvalue: ID
   46       | LOCAL ID
   47       | SCOPEOP ID
   48       | member

   49 member: lvalue '.' ID
   50       | lvalue '[' expr ']'
   51       | call '.' ID call '[' expr ']'

   52 call: call '(' elist ')'
   53     | lvalue callsuffix
   54     | '(' funcdef ')' '(' elist ')'

   55 callsuffix: normcall
   56           | methodcall

   57 normcall: '(' elist ')'

   58 methodcall: DOUPLEDOT ID '(' elist ')'

   59 elist: %empty
   60      | expr elist1

   61 elist1: %empty
   62       | ',' expr elist1

   63 objectdef: '['
   64          | objectdef1 ']'

   65 objectdef1: %empty
   66           | elist
   67           | indexed

   68 indexed: %empty
   69        | indexedelem indexed1

   70 indexed1: %empty
   71         | ',' indexedelem indexed1

   72 indexedelem: '{' expr ':' expr '}'

   73 block: '{' stmt1 '}'
   74      | '{' '}'

   75 funcdef: FUNCTION ID '(' idlist ')' block
   76        | FUNCTION '(' idlist ')' block

   77 const: NUMBER
   78      | STRING
   79      | NIL
   80      | TRUE
   81      | FALSE

   82 idlist: %empty
   83       | ID idlist1

   84 idlist1: %empty
   85        | ',' ID idlist1

   86 ifstmt: IF '(' expr ')' stmt ifstmt1

   87 ifstmt1: %empty
   88        | ELSE stmt

   89 whilestmt: WHILE '(' expr ')' stmt

   90 forstmt: FOR '(' elist ';' expr ';' elist ')' stmt

   91 returnstmt: RETURN returnstmt1

   92 returnstmt1: %empty
   93            | expr


Terminals, with rules where they appear

$end (0) 0
'%' (37) 22
'(' (40) 31 43 52 54 57 58 75 76 86 89 90
')' (41) 31 43 52 54 57 58 75 76 86 89 90
'*' (42) 20
'+' (43) 18
',' (44) 62 71 85
'-' (45) 19 32
'.' (46) 49 51
'/' (47) 21
':' (58) 72
';' (59) 5 10 11 14 90
'<' (60) 25
'=' (61) 39
'>' (62) 23
'[' (91) 50 51 63
']' (93) 50 51 64
'{' (123) 72 73 74
'}' (125) 72 73 74
error (256)
ID (258) 45 46 47 49 51 58 75 83 85
BREAK (259) 10
CONTINUE (260) 11
AND (261) 29
OR (262) 30
NOT (263) 33
GREATEREQUAL (264) 24
LESSEQUAL (265) 26
EQUAL (266) 27
NOTEQUAL (267) 28
PLUSPLUS (268) 34 35
MINUSMINUS (269) 36 37
LOCAL (270) 46
SCOPEOP (271) 47
DOUPLEDOT (272) 58
FUNCTION (273) 75 76
NUMBER (274) 77
STRING (275) 78
NIL (276) 79
TRUE (277) 80
FALSE (278) 81
IF (279) 86
ELSE (280) 88
WHILE (281) 89
FOR (282) 90
RETURN (283) 91
UMINUS (284)


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
program (49)
    on left: 1 2, on right: 0
stmt1 (50)
    on left: 3 4, on right: 1 3 73
stmt (51)
    on left: 5 6 7 8 9 10 11 12 13 14, on right: 3 4 86 88 89 90
expr (52)
    on left: 15 16 17, on right: 5 16 31 32 33 39 50 51 60 62 72 86
    89 90 93
op (53)
    on left: 18 19 20 21 22 23 24 25 26 27 28 29 30, on right: 16
term (54)
    on left: 31 32 33 34 35 36 37 38, on right: 17
assignexpr (55)
    on left: 39, on right: 15
primary (56)
    on left: 40 41 42 43 44, on right: 38
lvalue (57)
    on left: 45 46 47 48, on right: 34 35 36 37 39 40 49 50 53
member (58)
    on left: 49 50 51, on right: 48
call (59)
    on left: 52 53 54, on right: 41 51 52
callsuffix (60)
    on left: 55 56, on right: 53
normcall (61)
    on left: 57, on right: 55
methodcall (62)
    on left: 58, on right: 56
elist (63)
    on left: 59 60, on right: 52 54 57 58 66 90
elist1 (64)
    on left: 61 62, on right: 60 62
objectdef (65)
    on left: 63 64, on right: 42
objectdef1 (66)
    on left: 65 66 67, on right: 64
indexed (67)
    on left: 68 69, on right: 67
indexed1 (68)
    on left: 70 71, on right: 69 71
indexedelem (69)
    on left: 72, on right: 69 71
block (70)
    on left: 73 74, on right: 12 75 76
funcdef (71)
    on left: 75 76, on right: 13 43 54
const (72)
    on left: 77 78 79 80 81, on right: 44
idlist (73)
    on left: 82 83, on right: 75 76
idlist1 (74)
    on left: 84 85, on right: 83 85
ifstmt (75)
    on left: 86, on right: 6
ifstmt1 (76)
    on left: 87 88, on right: 86
whilestmt (77)
    on left: 89, on right: 7
forstmt (78)
    on left: 90, on right: 8
returnstmt (79)
    on left: 91, on right: 9
returnstmt1 (80)
    on left: 92 93, on right: 91


State 0

    0 $accept: . program $end

    ID          shift, and go to state 1
    BREAK       shift, and go to state 2
    CONTINUE    shift, and go to state 3
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    FUNCTION    shift, and go to state 9
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    IF          shift, and go to state 15
    WHILE       shift, and go to state 16
    FOR         shift, and go to state 17
    RETURN      shift, and go to state 18
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    ';'         shift, and go to state 22
    '{'         shift, and go to state 23

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 2 (program)

    program      go to state 24
    stmt1        go to state 25
    stmt         go to state 26
    expr         go to state 27
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    block        go to state 39
    funcdef      go to state 40
    const        go to state 41
    ifstmt       go to state 42
    whilestmt    go to state 43
    forstmt      go to state 44
    returnstmt   go to state 45


State 1

   45 lvalue: ID .

    $default  reduce using rule 45 (lvalue)


State 2

   10 stmt: BREAK . ';'

    ';'  shift, and go to state 46


State 3

   11 stmt: CONTINUE . ';'

    ';'  shift, and go to state 47


State 4

   33 term: NOT . expr

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    expr         go to state 49
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 5

   34 term: PLUSPLUS . lvalue

    ID       shift, and go to state 1
    LOCAL    shift, and go to state 7
    SCOPEOP  shift, and go to state 8
    '('      shift, and go to state 50

    lvalue  go to state 51
    member  go to state 32
    call    go to state 52


State 6

   36 term: MINUSMINUS . lvalue

    ID       shift, and go to state 1
    LOCAL    shift, and go to state 7
    SCOPEOP  shift, and go to state 8
    '('      shift, and go to state 50

    lvalue  go to state 53
    member  go to state 32
    call    go to state 52


State 7

   46 lvalue: LOCAL . ID

    ID  shift, and go to state 54


State 8

   47 lvalue: SCOPEOP . ID

    ID  shift, and go to state 55


State 9

   75 funcdef: FUNCTION . ID '(' idlist ')' block
   76        | FUNCTION . '(' idlist ')' block

    ID   shift, and go to state 56
    '('  shift, and go to state 57


State 10

   77 const: NUMBER .

    $default  reduce using rule 77 (const)


State 11

   78 const: STRING .

    $default  reduce using rule 78 (const)


State 12

   79 const: NIL .

    $default  reduce using rule 79 (const)


State 13

   80 const: TRUE .

    $default  reduce using rule 80 (const)


State 14

   81 const: FALSE .

    $default  reduce using rule 81 (const)


State 15

   86 ifstmt: IF . '(' expr ')' stmt ifstmt1

    '('  shift, and go to state 58


State 16

   89 whilestmt: WHILE . '(' expr ')' stmt

    '('  shift, and go to state 59


State 17

   90 forstmt: FOR . '(' elist ';' expr ';' elist ')' stmt

    '('  shift, and go to state 60


State 18

   91 returnstmt: RETURN . returnstmt1

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ID          [reduce using rule 92 (returnstmt1)]
    NOT         [reduce using rule 92 (returnstmt1)]
    PLUSPLUS    [reduce using rule 92 (returnstmt1)]
    MINUSMINUS  [reduce using rule 92 (returnstmt1)]
    LOCAL       [reduce using rule 92 (returnstmt1)]
    SCOPEOP     [reduce using rule 92 (returnstmt1)]
    NUMBER      [reduce using rule 92 (returnstmt1)]
    STRING      [reduce using rule 92 (returnstmt1)]
    NIL         [reduce using rule 92 (returnstmt1)]
    TRUE        [reduce using rule 92 (returnstmt1)]
    FALSE       [reduce using rule 92 (returnstmt1)]
    '('         [reduce using rule 92 (returnstmt1)]
    '['         [reduce using rule 92 (returnstmt1)]
    ']'         reduce using rule 59 (elist)
    ']'         [reduce using rule 65 (objectdef1)]
    ']'         [reduce using rule 68 (indexed)]
    ']'         [reduce using rule 92 (returnstmt1)]
    '-'         [reduce using rule 92 (returnstmt1)]
    '{'         [reduce using rule 92 (returnstmt1)]
    $default    reduce using rule 92 (returnstmt1)

    expr         go to state 61
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41
    returnstmt1  go to state 62


State 19

   31 term: '(' . expr ')'
   43 primary: '(' . funcdef ')'
   54 call: '(' . funcdef ')' '(' elist ')'

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    FUNCTION    shift, and go to state 9
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    expr         go to state 63
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    funcdef      go to state 64
    const        go to state 41


State 20

   63 objectdef: '[' .

    $default  reduce using rule 63 (objectdef)


State 21

   32 term: '-' . expr

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    expr         go to state 65
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 22

   14 stmt: ';' .

    $default  reduce using rule 14 (stmt)


State 23

   72 indexedelem: '{' . expr ':' expr '}'
   73 block: '{' . stmt1 '}'
   74      | '{' . '}'

    ID          shift, and go to state 1
    BREAK       shift, and go to state 2
    CONTINUE    shift, and go to state 3
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    FUNCTION    shift, and go to state 9
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    IF          shift, and go to state 15
    WHILE       shift, and go to state 16
    FOR         shift, and go to state 17
    RETURN      shift, and go to state 18
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    ';'         shift, and go to state 22
    '{'         shift, and go to state 23
    '}'         shift, and go to state 66

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    stmt1        go to state 67
    stmt         go to state 26
    expr         go to state 68
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    block        go to state 39
    funcdef      go to state 40
    const        go to state 41
    ifstmt       go to state 42
    whilestmt    go to state 43
    forstmt      go to state 44
    returnstmt   go to state 45


State 24

    0 $accept: program . $end

    $end  shift, and go to state 69


State 25

    1 program: stmt1 .
    3 stmt1: stmt1 . stmt

    ID          shift, and go to state 1
    BREAK       shift, and go to state 2
    CONTINUE    shift, and go to state 3
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    FUNCTION    shift, and go to state 9
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    IF          shift, and go to state 15
    WHILE       shift, and go to state 16
    FOR         shift, and go to state 17
    RETURN      shift, and go to state 18
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    ';'         shift, and go to state 22
    '{'         shift, and go to state 23

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 1 (program)

    stmt         go to state 70
    expr         go to state 27
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    block        go to state 39
    funcdef      go to state 40
    const        go to state 41
    ifstmt       go to state 42
    whilestmt    go to state 43
    forstmt      go to state 44
    returnstmt   go to state 45


State 26

    4 stmt1: stmt .

    $default  reduce using rule 4 (stmt1)


State 27

    5 stmt: expr . ';'
   16 expr: expr . op expr
   60 elist: expr . elist1

    AND           shift, and go to state 71
    OR            shift, and go to state 72
    GREATEREQUAL  shift, and go to state 73
    LESSEQUAL     shift, and go to state 74
    EQUAL         shift, and go to state 75
    NOTEQUAL      shift, and go to state 76
    '*'           shift, and go to state 77
    '/'           shift, and go to state 78
    '%'           shift, and go to state 79
    '+'           shift, and go to state 80
    '-'           shift, and go to state 81
    '>'           shift, and go to state 82
    '<'           shift, and go to state 83
    ';'           shift, and go to state 84
    ','           shift, and go to state 85

    $default  reduce using rule 61 (elist1)

    op      go to state 86
    elist1  go to state 87


State 28

   17 expr: term .

    $default  reduce using rule 17 (expr)


State 29

   15 expr: assignexpr .

    $default  reduce using rule 15 (expr)


State 30

   38 term: primary .

    $default  reduce using rule 38 (term)


State 31

   35 term: lvalue . PLUSPLUS
   37     | lvalue . MINUSMINUS
   39 assignexpr: lvalue . '=' expr
   40 primary: lvalue .
   49 member: lvalue . '.' ID
   50       | lvalue . '[' expr ']'
   53 call: lvalue . callsuffix

    PLUSPLUS    shift, and go to state 88
    MINUSMINUS  shift, and go to state 89
    DOUPLEDOT   shift, and go to state 90
    '('         shift, and go to state 91
    '['         shift, and go to state 92
    '.'         shift, and go to state 93
    '='         shift, and go to state 94

    PLUSPLUS    [reduce using rule 40 (primary)]
    MINUSMINUS  [reduce using rule 40 (primary)]
    '('         [reduce using rule 40 (primary)]
    '['         [reduce using rule 40 (primary)]
    $default    reduce using rule 40 (primary)

    callsuffix  go to state 95
    normcall    go to state 96
    methodcall  go to state 97


State 32

   48 lvalue: member .

    $default  reduce using rule 48 (lvalue)


State 33

   41 primary: call .
   51 member: call . '.' ID call '[' expr ']'
   52 call: call . '(' elist ')'

    '('  shift, and go to state 98
    '.'  shift, and go to state 99

    '('       [reduce using rule 41 (primary)]
    $default  reduce using rule 41 (primary)


State 34

   66 objectdef1: elist .

    $default  reduce using rule 66 (objectdef1)


State 35

   42 primary: objectdef .

    $default  reduce using rule 42 (primary)


State 36

   64 objectdef: objectdef1 . ']'

    ']'  shift, and go to state 100


State 37

   67 objectdef1: indexed .

    $default  reduce using rule 67 (objectdef1)


State 38

   69 indexed: indexedelem . indexed1

    ','  shift, and go to state 101

    $default  reduce using rule 70 (indexed1)

    indexed1  go to state 102


State 39

   12 stmt: block .

    $default  reduce using rule 12 (stmt)


State 40

   13 stmt: funcdef .

    $default  reduce using rule 13 (stmt)


State 41

   44 primary: const .

    $default  reduce using rule 44 (primary)


State 42

    6 stmt: ifstmt .

    $default  reduce using rule 6 (stmt)


State 43

    7 stmt: whilestmt .

    $default  reduce using rule 7 (stmt)


State 44

    8 stmt: forstmt .

    $default  reduce using rule 8 (stmt)


State 45

    9 stmt: returnstmt .

    $default  reduce using rule 9 (stmt)


State 46

   10 stmt: BREAK ';' .

    $default  reduce using rule 10 (stmt)


State 47

   11 stmt: CONTINUE ';' .

    $default  reduce using rule 11 (stmt)


State 48

   72 indexedelem: '{' . expr ':' expr '}'

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    expr         go to state 103
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 49

   16 expr: expr . op expr
   33 term: NOT expr .
   60 elist: expr . elist1

    AND           shift, and go to state 71
    OR            shift, and go to state 72
    GREATEREQUAL  shift, and go to state 73
    LESSEQUAL     shift, and go to state 74
    EQUAL         shift, and go to state 75
    NOTEQUAL      shift, and go to state 76
    '*'           shift, and go to state 77
    '/'           shift, and go to state 78
    '%'           shift, and go to state 79
    '+'           shift, and go to state 80
    '-'           shift, and go to state 81
    '>'           shift, and go to state 82
    '<'           shift, and go to state 83
    ','           shift, and go to state 85

    ']'       reduce using rule 33 (term)
    ']'       [reduce using rule 61 (elist1)]
    ','       [reduce using rule 33 (term)]
    $default  reduce using rule 33 (term)

    op      go to state 86
    elist1  go to state 87


State 50

   54 call: '(' . funcdef ')' '(' elist ')'

    FUNCTION  shift, and go to state 9

    funcdef  go to state 104


State 51

   34 term: PLUSPLUS lvalue .
   49 member: lvalue . '.' ID
   50       | lvalue . '[' expr ']'
   53 call: lvalue . callsuffix

    DOUPLEDOT  shift, and go to state 90
    '.'        shift, and go to state 93

    $default  reduce using rule 34 (term)

    callsuffix  go to state 95
    normcall    go to state 96
    methodcall  go to state 97


State 52

   51 member: call . '.' ID call '[' expr ']'
   52 call: call . '(' elist ')'

    '('  shift, and go to state 98
    '.'  shift, and go to state 99


State 53

   36 term: MINUSMINUS lvalue .
   49 member: lvalue . '.' ID
   50       | lvalue . '[' expr ']'
   53 call: lvalue . callsuffix

    DOUPLEDOT  shift, and go to state 90
    '.'        shift, and go to state 93

    $default  reduce using rule 36 (term)

    callsuffix  go to state 95
    normcall    go to state 96
    methodcall  go to state 97


State 54

   46 lvalue: LOCAL ID .

    $default  reduce using rule 46 (lvalue)


State 55

   47 lvalue: SCOPEOP ID .

    $default  reduce using rule 47 (lvalue)


State 56

   75 funcdef: FUNCTION ID . '(' idlist ')' block

    '('  shift, and go to state 105


State 57

   76 funcdef: FUNCTION '(' . idlist ')' block

    ID  shift, and go to state 106

    $default  reduce using rule 82 (idlist)

    idlist  go to state 107


State 58

   86 ifstmt: IF '(' . expr ')' stmt ifstmt1

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    expr         go to state 108
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 59

   89 whilestmt: WHILE '(' . expr ')' stmt

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    expr         go to state 109
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 60

   90 forstmt: FOR '(' . elist ';' expr ';' elist ')' stmt

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    expr         go to state 110
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 111
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 61

   16 expr: expr . op expr
   60 elist: expr . elist1
   93 returnstmt1: expr .

    AND           shift, and go to state 71
    OR            shift, and go to state 72
    GREATEREQUAL  shift, and go to state 73
    LESSEQUAL     shift, and go to state 74
    EQUAL         shift, and go to state 75
    NOTEQUAL      shift, and go to state 76
    '*'           shift, and go to state 77
    '/'           shift, and go to state 78
    '%'           shift, and go to state 79
    '+'           shift, and go to state 80
    '-'           shift, and go to state 81
    '>'           shift, and go to state 82
    '<'           shift, and go to state 83
    ','           shift, and go to state 85

    ']'       reduce using rule 61 (elist1)
    ']'       [reduce using rule 93 (returnstmt1)]
    '-'       [reduce using rule 93 (returnstmt1)]
    $default  reduce using rule 93 (returnstmt1)

    op      go to state 86
    elist1  go to state 87


State 62

   91 returnstmt: RETURN returnstmt1 .

    $default  reduce using rule 91 (returnstmt)


State 63

   16 expr: expr . op expr
   31 term: '(' expr . ')'
   60 elist: expr . elist1

    AND           shift, and go to state 71
    OR            shift, and go to state 72
    GREATEREQUAL  shift, and go to state 73
    LESSEQUAL     shift, and go to state 74
    EQUAL         shift, and go to state 75
    NOTEQUAL      shift, and go to state 76
    ')'           shift, and go to state 112
    '*'           shift, and go to state 77
    '/'           shift, and go to state 78
    '%'           shift, and go to state 79
    '+'           shift, and go to state 80
    '-'           shift, and go to state 81
    '>'           shift, and go to state 82
    '<'           shift, and go to state 83
    ','           shift, and go to state 85

    $default  reduce using rule 61 (elist1)

    op      go to state 86
    elist1  go to state 87


State 64

   43 primary: '(' funcdef . ')'
   54 call: '(' funcdef . ')' '(' elist ')'

    ')'  shift, and go to state 113


State 65

   16 expr: expr . op expr
   32 term: '-' expr .
   60 elist: expr . elist1

    AND           shift, and go to state 71
    OR            shift, and go to state 72
    GREATEREQUAL  shift, and go to state 73
    LESSEQUAL     shift, and go to state 74
    EQUAL         shift, and go to state 75
    NOTEQUAL      shift, and go to state 76
    '*'           shift, and go to state 77
    '/'           shift, and go to state 78
    '%'           shift, and go to state 79
    '+'           shift, and go to state 80
    '-'           shift, and go to state 81
    '>'           shift, and go to state 82
    '<'           shift, and go to state 83
    ','           shift, and go to state 85

    ']'       reduce using rule 32 (term)
    ']'       [reduce using rule 61 (elist1)]
    ','       [reduce using rule 32 (term)]
    $default  reduce using rule 32 (term)

    op      go to state 86
    elist1  go to state 87


State 66

   74 block: '{' '}' .

    $default  reduce using rule 74 (block)


State 67

    3 stmt1: stmt1 . stmt
   73 block: '{' stmt1 . '}'

    ID          shift, and go to state 1
    BREAK       shift, and go to state 2
    CONTINUE    shift, and go to state 3
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    FUNCTION    shift, and go to state 9
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    IF          shift, and go to state 15
    WHILE       shift, and go to state 16
    FOR         shift, and go to state 17
    RETURN      shift, and go to state 18
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    ';'         shift, and go to state 22
    '{'         shift, and go to state 23
    '}'         shift, and go to state 114

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    stmt         go to state 70
    expr         go to state 27
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    block        go to state 39
    funcdef      go to state 40
    const        go to state 41
    ifstmt       go to state 42
    whilestmt    go to state 43
    forstmt      go to state 44
    returnstmt   go to state 45


State 68

    5 stmt: expr . ';'
   16 expr: expr . op expr
   60 elist: expr . elist1
   72 indexedelem: '{' expr . ':' expr '}'

    AND           shift, and go to state 71
    OR            shift, and go to state 72
    GREATEREQUAL  shift, and go to state 73
    LESSEQUAL     shift, and go to state 74
    EQUAL         shift, and go to state 75
    NOTEQUAL      shift, and go to state 76
    '*'           shift, and go to state 77
    '/'           shift, and go to state 78
    '%'           shift, and go to state 79
    '+'           shift, and go to state 80
    '-'           shift, and go to state 81
    '>'           shift, and go to state 82
    '<'           shift, and go to state 83
    ';'           shift, and go to state 84
    ','           shift, and go to state 85
    ':'           shift, and go to state 115

    $default  reduce using rule 61 (elist1)

    op      go to state 86
    elist1  go to state 87


State 69

    0 $accept: program $end .

    $default  accept


State 70

    3 stmt1: stmt1 stmt .

    $default  reduce using rule 3 (stmt1)


State 71

   29 op: AND .

    $default  reduce using rule 29 (op)


State 72

   30 op: OR .

    $default  reduce using rule 30 (op)


State 73

   24 op: GREATEREQUAL .

    $default  reduce using rule 24 (op)


State 74

   26 op: LESSEQUAL .

    $default  reduce using rule 26 (op)


State 75

   27 op: EQUAL .

    $default  reduce using rule 27 (op)


State 76

   28 op: NOTEQUAL .

    $default  reduce using rule 28 (op)


State 77

   20 op: '*' .

    $default  reduce using rule 20 (op)


State 78

   21 op: '/' .

    $default  reduce using rule 21 (op)


State 79

   22 op: '%' .

    $default  reduce using rule 22 (op)


State 80

   18 op: '+' .

    $default  reduce using rule 18 (op)


State 81

   19 op: '-' .

    $default  reduce using rule 19 (op)


State 82

   23 op: '>' .

    $default  reduce using rule 23 (op)


State 83

   25 op: '<' .

    $default  reduce using rule 25 (op)


State 84

    5 stmt: expr ';' .

    $default  reduce using rule 5 (stmt)


State 85

   62 elist1: ',' . expr elist1

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    expr         go to state 116
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 86

   16 expr: expr op . expr

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    expr         go to state 117
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 87

   60 elist: expr elist1 .

    $default  reduce using rule 60 (elist)


State 88

   35 term: lvalue PLUSPLUS .

    $default  reduce using rule 35 (term)


State 89

   37 term: lvalue MINUSMINUS .

    $default  reduce using rule 37 (term)


State 90

   58 methodcall: DOUPLEDOT . ID '(' elist ')'

    ID  shift, and go to state 118


State 91

   57 normcall: '(' . elist ')'

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    expr         go to state 110
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 119
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 92

   50 member: lvalue '[' . expr ']'

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    expr         go to state 120
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 93

   49 member: lvalue '.' . ID

    ID  shift, and go to state 121


State 94

   39 assignexpr: lvalue '=' . expr

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    expr         go to state 122
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 95

   53 call: lvalue callsuffix .

    $default  reduce using rule 53 (call)


State 96

   55 callsuffix: normcall .

    $default  reduce using rule 55 (callsuffix)


State 97

   56 callsuffix: methodcall .

    $default  reduce using rule 56 (callsuffix)


State 98

   52 call: call '(' . elist ')'

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    expr         go to state 110
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 123
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 99

   51 member: call '.' . ID call '[' expr ']'

    ID  shift, and go to state 124


State 100

   64 objectdef: objectdef1 ']' .

    $default  reduce using rule 64 (objectdef)


State 101

   71 indexed1: ',' . indexedelem indexed1

    '{'  shift, and go to state 48

    indexedelem  go to state 125


State 102

   69 indexed: indexedelem indexed1 .

    $default  reduce using rule 69 (indexed)


State 103

   16 expr: expr . op expr
   60 elist: expr . elist1
   72 indexedelem: '{' expr . ':' expr '}'

    AND           shift, and go to state 71
    OR            shift, and go to state 72
    GREATEREQUAL  shift, and go to state 73
    LESSEQUAL     shift, and go to state 74
    EQUAL         shift, and go to state 75
    NOTEQUAL      shift, and go to state 76
    '*'           shift, and go to state 77
    '/'           shift, and go to state 78
    '%'           shift, and go to state 79
    '+'           shift, and go to state 80
    '-'           shift, and go to state 81
    '>'           shift, and go to state 82
    '<'           shift, and go to state 83
    ','           shift, and go to state 85
    ':'           shift, and go to state 115

    $default  reduce using rule 61 (elist1)

    op      go to state 86
    elist1  go to state 87


State 104

   54 call: '(' funcdef . ')' '(' elist ')'

    ')'  shift, and go to state 126


State 105

   75 funcdef: FUNCTION ID '(' . idlist ')' block

    ID  shift, and go to state 106

    $default  reduce using rule 82 (idlist)

    idlist  go to state 127


State 106

   83 idlist: ID . idlist1

    ','  shift, and go to state 128

    $default  reduce using rule 84 (idlist1)

    idlist1  go to state 129


State 107

   76 funcdef: FUNCTION '(' idlist . ')' block

    ')'  shift, and go to state 130


State 108

   16 expr: expr . op expr
   60 elist: expr . elist1
   86 ifstmt: IF '(' expr . ')' stmt ifstmt1

    AND           shift, and go to state 71
    OR            shift, and go to state 72
    GREATEREQUAL  shift, and go to state 73
    LESSEQUAL     shift, and go to state 74
    EQUAL         shift, and go to state 75
    NOTEQUAL      shift, and go to state 76
    ')'           shift, and go to state 131
    '*'           shift, and go to state 77
    '/'           shift, and go to state 78
    '%'           shift, and go to state 79
    '+'           shift, and go to state 80
    '-'           shift, and go to state 81
    '>'           shift, and go to state 82
    '<'           shift, and go to state 83
    ','           shift, and go to state 85

    $default  reduce using rule 61 (elist1)

    op      go to state 86
    elist1  go to state 87


State 109

   16 expr: expr . op expr
   60 elist: expr . elist1
   89 whilestmt: WHILE '(' expr . ')' stmt

    AND           shift, and go to state 71
    OR            shift, and go to state 72
    GREATEREQUAL  shift, and go to state 73
    LESSEQUAL     shift, and go to state 74
    EQUAL         shift, and go to state 75
    NOTEQUAL      shift, and go to state 76
    ')'           shift, and go to state 132
    '*'           shift, and go to state 77
    '/'           shift, and go to state 78
    '%'           shift, and go to state 79
    '+'           shift, and go to state 80
    '-'           shift, and go to state 81
    '>'           shift, and go to state 82
    '<'           shift, and go to state 83
    ','           shift, and go to state 85

    $default  reduce using rule 61 (elist1)

    op      go to state 86
    elist1  go to state 87


State 110

   16 expr: expr . op expr
   60 elist: expr . elist1

    AND           shift, and go to state 71
    OR            shift, and go to state 72
    GREATEREQUAL  shift, and go to state 73
    LESSEQUAL     shift, and go to state 74
    EQUAL         shift, and go to state 75
    NOTEQUAL      shift, and go to state 76
    '*'           shift, and go to state 77
    '/'           shift, and go to state 78
    '%'           shift, and go to state 79
    '+'           shift, and go to state 80
    '-'           shift, and go to state 81
    '>'           shift, and go to state 82
    '<'           shift, and go to state 83
    ','           shift, and go to state 85

    $default  reduce using rule 61 (elist1)

    op      go to state 86
    elist1  go to state 87


State 111

   66 objectdef1: elist .
   90 forstmt: FOR '(' elist . ';' expr ';' elist ')' stmt

    ';'  shift, and go to state 133

    $default  reduce using rule 66 (objectdef1)


State 112

   31 term: '(' expr ')' .

    $default  reduce using rule 31 (term)


State 113

   43 primary: '(' funcdef ')' .
   54 call: '(' funcdef ')' . '(' elist ')'

    $default  reduce using rule 43 (primary)


State 114

   73 block: '{' stmt1 '}' .

    $default  reduce using rule 73 (block)


State 115

   72 indexedelem: '{' expr ':' . expr '}'

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    expr         go to state 135
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 116

   16 expr: expr . op expr
   60 elist: expr . elist1
   62 elist1: ',' expr . elist1

    AND           shift, and go to state 71
    OR            shift, and go to state 72
    GREATEREQUAL  shift, and go to state 73
    LESSEQUAL     shift, and go to state 74
    EQUAL         shift, and go to state 75
    NOTEQUAL      shift, and go to state 76
    '*'           shift, and go to state 77
    '/'           shift, and go to state 78
    '%'           shift, and go to state 79
    '+'           shift, and go to state 80
    '-'           shift, and go to state 81
    '>'           shift, and go to state 82
    '<'           shift, and go to state 83
    ','           shift, and go to state 85

    $default  reduce using rule 61 (elist1)

    op      go to state 86
    elist1  go to state 136


State 117

   16 expr: expr . op expr
   16     | expr op expr .
   60 elist: expr . elist1

    AND           shift, and go to state 71
    OR            shift, and go to state 72
    GREATEREQUAL  shift, and go to state 73
    LESSEQUAL     shift, and go to state 74
    EQUAL         shift, and go to state 75
    NOTEQUAL      shift, and go to state 76
    '*'           shift, and go to state 77
    '/'           shift, and go to state 78
    '%'           shift, and go to state 79
    '+'           shift, and go to state 80
    '-'           shift, and go to state 81
    '>'           shift, and go to state 82
    '<'           shift, and go to state 83
    ','           shift, and go to state 85

    AND           [reduce using rule 16 (expr)]
    OR            [reduce using rule 16 (expr)]
    GREATEREQUAL  [reduce using rule 16 (expr)]
    LESSEQUAL     [reduce using rule 16 (expr)]
    EQUAL         [reduce using rule 16 (expr)]
    NOTEQUAL      [reduce using rule 16 (expr)]
    ']'           reduce using rule 16 (expr)
    ']'           [reduce using rule 61 (elist1)]
    '*'           [reduce using rule 16 (expr)]
    '/'           [reduce using rule 16 (expr)]
    '%'           [reduce using rule 16 (expr)]
    '+'           [reduce using rule 16 (expr)]
    '-'           [reduce using rule 16 (expr)]
    '>'           [reduce using rule 16 (expr)]
    '<'           [reduce using rule 16 (expr)]
    ','           [reduce using rule 16 (expr)]
    $default      reduce using rule 16 (expr)

    op      go to state 86
    elist1  go to state 87


State 118

   58 methodcall: DOUPLEDOT ID . '(' elist ')'

    '('  shift, and go to state 137


State 119

   57 normcall: '(' elist . ')'
   66 objectdef1: elist .

    ')'  shift, and go to state 138

    $default  reduce using rule 66 (objectdef1)


State 120

   16 expr: expr . op expr
   50 member: lvalue '[' expr . ']'
   60 elist: expr . elist1

    AND           shift, and go to state 71
    OR            shift, and go to state 72
    GREATEREQUAL  shift, and go to state 73
    LESSEQUAL     shift, and go to state 74
    EQUAL         shift, and go to state 75
    NOTEQUAL      shift, and go to state 76
    ']'           shift, and go to state 139
    '*'           shift, and go to state 77
    '/'           shift, and go to state 78
    '%'           shift, and go to state 79
    '+'           shift, and go to state 80
    '-'           shift, and go to state 81
    '>'           shift, and go to state 82
    '<'           shift, and go to state 83
    ','           shift, and go to state 85

    ']'  [reduce using rule 61 (elist1)]

    op      go to state 86
    elist1  go to state 87


State 121

   49 member: lvalue '.' ID .

    $default  reduce using rule 49 (member)


State 122

   16 expr: expr . op expr
   39 assignexpr: lvalue '=' expr .
   60 elist: expr . elist1

    ','  shift, and go to state 85

    ']'       reduce using rule 39 (assignexpr)
    ']'       [reduce using rule 61 (elist1)]
    ','       [reduce using rule 39 (assignexpr)]
    $default  reduce using rule 39 (assignexpr)

    op      go to state 86
    elist1  go to state 87


State 123

   52 call: call '(' elist . ')'
   66 objectdef1: elist .

    ')'  shift, and go to state 140

    $default  reduce using rule 66 (objectdef1)


State 124

   51 member: call '.' ID . call '[' expr ']'

    ID       shift, and go to state 1
    LOCAL    shift, and go to state 7
    SCOPEOP  shift, and go to state 8
    '('      shift, and go to state 50

    lvalue  go to state 141
    member  go to state 32
    call    go to state 142


State 125

   71 indexed1: ',' indexedelem . indexed1

    ','  shift, and go to state 101

    $default  reduce using rule 70 (indexed1)

    indexed1  go to state 143


State 126

   54 call: '(' funcdef ')' . '(' elist ')'

    '('  shift, and go to state 134


State 127

   75 funcdef: FUNCTION ID '(' idlist . ')' block

    ')'  shift, and go to state 144


State 128

   85 idlist1: ',' . ID idlist1

    ID  shift, and go to state 145


State 129

   83 idlist: ID idlist1 .

    $default  reduce using rule 83 (idlist)


State 130

   76 funcdef: FUNCTION '(' idlist ')' . block

    '{'  shift, and go to state 146

    block  go to state 147


State 131

   86 ifstmt: IF '(' expr ')' . stmt ifstmt1

    ID          shift, and go to state 1
    BREAK       shift, and go to state 2
    CONTINUE    shift, and go to state 3
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    FUNCTION    shift, and go to state 9
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    IF          shift, and go to state 15
    WHILE       shift, and go to state 16
    FOR         shift, and go to state 17
    RETURN      shift, and go to state 18
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    ';'         shift, and go to state 22
    '{'         shift, and go to state 23

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    stmt         go to state 148
    expr         go to state 27
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    block        go to state 39
    funcdef      go to state 40
    const        go to state 41
    ifstmt       go to state 42
    whilestmt    go to state 43
    forstmt      go to state 44
    returnstmt   go to state 45


State 132

   89 whilestmt: WHILE '(' expr ')' . stmt

    ID          shift, and go to state 1
    BREAK       shift, and go to state 2
    CONTINUE    shift, and go to state 3
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    FUNCTION    shift, and go to state 9
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    IF          shift, and go to state 15
    WHILE       shift, and go to state 16
    FOR         shift, and go to state 17
    RETURN      shift, and go to state 18
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    ';'         shift, and go to state 22
    '{'         shift, and go to state 23

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    stmt         go to state 149
    expr         go to state 27
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    block        go to state 39
    funcdef      go to state 40
    const        go to state 41
    ifstmt       go to state 42
    whilestmt    go to state 43
    forstmt      go to state 44
    returnstmt   go to state 45


State 133

   90 forstmt: FOR '(' elist ';' . expr ';' elist ')' stmt

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    expr         go to state 150
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 134

   54 call: '(' funcdef ')' '(' . elist ')'

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    expr         go to state 110
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 151
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 135

   16 expr: expr . op expr
   60 elist: expr . elist1
   72 indexedelem: '{' expr ':' expr . '}'

    AND           shift, and go to state 71
    OR            shift, and go to state 72
    GREATEREQUAL  shift, and go to state 73
    LESSEQUAL     shift, and go to state 74
    EQUAL         shift, and go to state 75
    NOTEQUAL      shift, and go to state 76
    '*'           shift, and go to state 77
    '/'           shift, and go to state 78
    '%'           shift, and go to state 79
    '+'           shift, and go to state 80
    '-'           shift, and go to state 81
    '>'           shift, and go to state 82
    '<'           shift, and go to state 83
    ','           shift, and go to state 85
    '}'           shift, and go to state 152

    $default  reduce using rule 61 (elist1)

    op      go to state 86
    elist1  go to state 87


State 136

   60 elist: expr elist1 .
   62 elist1: ',' expr elist1 .

    ']'       reduce using rule 60 (elist)
    ']'       [reduce using rule 62 (elist1)]
    $default  reduce using rule 62 (elist1)


State 137

   58 methodcall: DOUPLEDOT ID '(' . elist ')'

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    expr         go to state 110
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 153
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 138

   57 normcall: '(' elist ')' .

    $default  reduce using rule 57 (normcall)


State 139

   50 member: lvalue '[' expr ']' .

    $default  reduce using rule 50 (member)


State 140

   52 call: call '(' elist ')' .

    $default  reduce using rule 52 (call)


State 141

   49 member: lvalue . '.' ID
   50       | lvalue . '[' expr ']'
   53 call: lvalue . callsuffix

    DOUPLEDOT  shift, and go to state 90
    '('        shift, and go to state 91
    '['        shift, and go to state 92
    '.'        shift, and go to state 93

    callsuffix  go to state 95
    normcall    go to state 96
    methodcall  go to state 97


State 142

   51 member: call . '.' ID call '[' expr ']'
   51       | call '.' ID call . '[' expr ']'
   52 call: call . '(' elist ')'

    '('  shift, and go to state 98
    '['  shift, and go to state 154
    '.'  shift, and go to state 99


State 143

   71 indexed1: ',' indexedelem indexed1 .

    $default  reduce using rule 71 (indexed1)


State 144

   75 funcdef: FUNCTION ID '(' idlist ')' . block

    '{'  shift, and go to state 146

    block  go to state 155


State 145

   85 idlist1: ',' ID . idlist1

    ','  shift, and go to state 128

    $default  reduce using rule 84 (idlist1)

    idlist1  go to state 156


State 146

   73 block: '{' . stmt1 '}'
   74      | '{' . '}'

    ID          shift, and go to state 1
    BREAK       shift, and go to state 2
    CONTINUE    shift, and go to state 3
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    FUNCTION    shift, and go to state 9
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    IF          shift, and go to state 15
    WHILE       shift, and go to state 16
    FOR         shift, and go to state 17
    RETURN      shift, and go to state 18
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    ';'         shift, and go to state 22
    '{'         shift, and go to state 23
    '}'         shift, and go to state 66

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    stmt1        go to state 67
    stmt         go to state 26
    expr         go to state 27
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    block        go to state 39
    funcdef      go to state 40
    const        go to state 41
    ifstmt       go to state 42
    whilestmt    go to state 43
    forstmt      go to state 44
    returnstmt   go to state 45


State 147

   76 funcdef: FUNCTION '(' idlist ')' block .

    $default  reduce using rule 76 (funcdef)


State 148

   86 ifstmt: IF '(' expr ')' stmt . ifstmt1

    ELSE  shift, and go to state 157

    ELSE      [reduce using rule 87 (ifstmt1)]
    $default  reduce using rule 87 (ifstmt1)

    ifstmt1  go to state 158


State 149

   89 whilestmt: WHILE '(' expr ')' stmt .

    $default  reduce using rule 89 (whilestmt)


State 150

   16 expr: expr . op expr
   60 elist: expr . elist1
   90 forstmt: FOR '(' elist ';' expr . ';' elist ')' stmt

    AND           shift, and go to state 71
    OR            shift, and go to state 72
    GREATEREQUAL  shift, and go to state 73
    LESSEQUAL     shift, and go to state 74
    EQUAL         shift, and go to state 75
    NOTEQUAL      shift, and go to state 76
    '*'           shift, and go to state 77
    '/'           shift, and go to state 78
    '%'           shift, and go to state 79
    '+'           shift, and go to state 80
    '-'           shift, and go to state 81
    '>'           shift, and go to state 82
    '<'           shift, and go to state 83
    ';'           shift, and go to state 159
    ','           shift, and go to state 85

    $default  reduce using rule 61 (elist1)

    op      go to state 86
    elist1  go to state 87


State 151

   54 call: '(' funcdef ')' '(' elist . ')'
   66 objectdef1: elist .

    ')'  shift, and go to state 160

    $default  reduce using rule 66 (objectdef1)


State 152

   72 indexedelem: '{' expr ':' expr '}' .

    $default  reduce using rule 72 (indexedelem)


State 153

   58 methodcall: DOUPLEDOT ID '(' elist . ')'
   66 objectdef1: elist .

    ')'  shift, and go to state 161

    $default  reduce using rule 66 (objectdef1)


State 154

   51 member: call '.' ID call '[' . expr ']'

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    expr         go to state 162
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 155

   75 funcdef: FUNCTION ID '(' idlist ')' block .

    $default  reduce using rule 75 (funcdef)


State 156

   85 idlist1: ',' ID idlist1 .

    $default  reduce using rule 85 (idlist1)


State 157

   88 ifstmt1: ELSE . stmt

    ID          shift, and go to state 1
    BREAK       shift, and go to state 2
    CONTINUE    shift, and go to state 3
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    FUNCTION    shift, and go to state 9
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    IF          shift, and go to state 15
    WHILE       shift, and go to state 16
    FOR         shift, and go to state 17
    RETURN      shift, and go to state 18
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    ';'         shift, and go to state 22
    '{'         shift, and go to state 23

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    stmt         go to state 163
    expr         go to state 27
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    block        go to state 39
    funcdef      go to state 40
    const        go to state 41
    ifstmt       go to state 42
    whilestmt    go to state 43
    forstmt      go to state 44
    returnstmt   go to state 45


State 158

   86 ifstmt: IF '(' expr ')' stmt ifstmt1 .

    $default  reduce using rule 86 (ifstmt)


State 159

   90 forstmt: FOR '(' elist ';' expr ';' . elist ')' stmt

    ID          shift, and go to state 1
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    '{'         shift, and go to state 48

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    expr         go to state 110
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 164
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    const        go to state 41


State 160

   54 call: '(' funcdef ')' '(' elist ')' .

    $default  reduce using rule 54 (call)


State 161

   58 methodcall: DOUPLEDOT ID '(' elist ')' .

    $default  reduce using rule 58 (methodcall)


State 162

   16 expr: expr . op expr
   51 member: call '.' ID call '[' expr . ']'
   60 elist: expr . elist1

    AND           shift, and go to state 71
    OR            shift, and go to state 72
    GREATEREQUAL  shift, and go to state 73
    LESSEQUAL     shift, and go to state 74
    EQUAL         shift, and go to state 75
    NOTEQUAL      shift, and go to state 76
    ']'           shift, and go to state 165
    '*'           shift, and go to state 77
    '/'           shift, and go to state 78
    '%'           shift, and go to state 79
    '+'           shift, and go to state 80
    '-'           shift, and go to state 81
    '>'           shift, and go to state 82
    '<'           shift, and go to state 83
    ','           shift, and go to state 85

    ']'  [reduce using rule 61 (elist1)]

    op      go to state 86
    elist1  go to state 87


State 163

   88 ifstmt1: ELSE stmt .

    $default  reduce using rule 88 (ifstmt1)


State 164

   66 objectdef1: elist .
   90 forstmt: FOR '(' elist ';' expr ';' elist . ')' stmt

    ')'  shift, and go to state 166

    $default  reduce using rule 66 (objectdef1)


State 165

   51 member: call '.' ID call '[' expr ']' .

    $default  reduce using rule 51 (member)


State 166

   90 forstmt: FOR '(' elist ';' expr ';' elist ')' . stmt

    ID          shift, and go to state 1
    BREAK       shift, and go to state 2
    CONTINUE    shift, and go to state 3
    NOT         shift, and go to state 4
    PLUSPLUS    shift, and go to state 5
    MINUSMINUS  shift, and go to state 6
    LOCAL       shift, and go to state 7
    SCOPEOP     shift, and go to state 8
    FUNCTION    shift, and go to state 9
    NUMBER      shift, and go to state 10
    STRING      shift, and go to state 11
    NIL         shift, and go to state 12
    TRUE        shift, and go to state 13
    FALSE       shift, and go to state 14
    IF          shift, and go to state 15
    WHILE       shift, and go to state 16
    FOR         shift, and go to state 17
    RETURN      shift, and go to state 18
    '('         shift, and go to state 19
    '['         shift, and go to state 20
    '-'         shift, and go to state 21
    ';'         shift, and go to state 22
    '{'         shift, and go to state 23

    ']'       reduce using rule 59 (elist)
    ']'       [reduce using rule 65 (objectdef1)]
    ']'       [reduce using rule 68 (indexed)]
    $default  reduce using rule 59 (elist)

    stmt         go to state 167
    expr         go to state 27
    term         go to state 28
    assignexpr   go to state 29
    primary      go to state 30
    lvalue       go to state 31
    member       go to state 32
    call         go to state 33
    elist        go to state 34
    objectdef    go to state 35
    objectdef1   go to state 36
    indexed      go to state 37
    indexedelem  go to state 38
    block        go to state 39
    funcdef      go to state 40
    const        go to state 41
    ifstmt       go to state 42
    whilestmt    go to state 43
    forstmt      go to state 44
    returnstmt   go to state 45


State 167

   90 forstmt: FOR '(' elist ';' expr ';' elist ')' stmt .

    $default  reduce using rule 90 (forstmt)
